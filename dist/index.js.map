{"version":3,"sources":["../src/core/request.ts","../src/const/regex.ts","../src/api/login.ts","../src/decoders/planning-icons.ts","../src/decoders/planning-item.ts","../src/decoders/planning-day.ts","../src/decoders/planning-week.ts","../src/api/planning.ts","../src/utils/cloudflare.ts","../src/decoders/profile.ts","../src/api/profile.ts"],"names":["parse","fr","format"],"mappings":"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","file":"index.js","sourcesContent":["import type { Session } from \"~/models\";\n\nexport class Request {\n    private readonly url: URL;\n    private method: string = \"GET\";\n    private headers: Headers;\n    private body?: string;\n    private redirect: RequestRedirect;\n\n    public constructor(baseURL: string, path: string, redirect: RequestRedirect = \"manual\") {\n        this.url = new URL(baseURL + path);\n        this.headers = new Headers();\n        this.redirect = redirect;\n    }\n\n    public setFormData(data: string): void {\n        this.method = \"POST\";\n        this.body = data;\n        this.headers.set(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n\n    public setSession(session: Session): void {\n        const cookies = [`SERVERID=${session.serverId}`, `${session.cookieName}=${session.id}`];\n        this.headers.set(\"Cookie\", cookies.join(\"; \"));\n    }\n\n    public async send(): Promise<Response> {\n        this.headers.set(\"Accept-Encoding\", \"gzip, deflate, br\");\n        this.headers.set(\"Accept\", \"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8\");\n        this.headers.set(\"User-Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3\");\n\n        return fetch(this.url, {\n            method: this.method,\n            headers: this.headers,\n            body: this.body,\n            redirect: this.redirect,\n        });\n    }\n}\n","export const regex = {\n    login_token_csrf: /<input[^>]*name=\"token_csrf\"[^>]*value=\"([^\"]+)\"/,\n    check_instance_netypareo: /NetYPar/g,\n    check_instance_ymag: /YMAG/g,\n    student_timetable: /var planningJSON += (.+);/,\n};\n","import { Request } from \"~/core/request\";\nimport type { Session } from \"~/models\";\nimport { regex } from \"~/const/regex\";\nimport parse from \"node-html-parser\";\n\nfunction parseCookies(headers: Headers): string[] {\n    const raw = headers.get(\"set-cookie\");\n    if (!raw) return [];\n\n    const cookiePattern = /(?:[^,]+?=[^;]+(?:;[^,]*)*)(?=, |$)/g;\n\n    return raw.match(cookiePattern)?.map((s) => s.trim()) || [];\n}\n\nexport const loginCredentials = async (baseURL: string, username: string, password: string, cookieName: string = \"NYSESSID\"): Promise<Session> => {\n    const checkRequest = new Request(baseURL, \"/\");\n    const checkResponse = await checkRequest.send();\n    const checkResponseContent = await checkResponse.text();\n\n    if (checkResponse.status !== 302) {\n        if (!regex.check_instance_netypareo.test(checkResponseContent)) {\n            throw new Error(\"Failed to verify instance. Not a valid NetYPareo instance netypareo\");\n        }\n        if (!regex.check_instance_ymag.test(checkResponseContent)) {\n            throw new Error(\"Failed to verify instance. Not a valid NetYPareo instance ymag\");\n        }\n    }\n\n    const instanceURL = checkResponse.headers.get(\"location\") || \"\";\n\n    const tokenRequest = new Request(baseURL, `/${instanceURL}/login/`);\n    const tokenResponse = await tokenRequest.send();\n    const cookies = parseCookies(tokenResponse.headers);\n\n    const tokenCookie = cookies.find((c) => c.startsWith(`${cookieName}=`));\n    if (!tokenCookie) throw new Error(\"Failed to get CSRF token cookie\");\n\n    let serverIdCookie = cookies.find((c) => c.startsWith(\"SERVERID=\")) ?? \"SERVERID=local\";\n    console.log(\"Server ID cookie:\", serverIdCookie);\n\n    if (serverIdCookie === undefined) throw new Error(\"Failed to get SERVERID cookie\");\n\n    const tokenResponseContent = await tokenResponse.text();\n\n    const tokenCsrfMatch = tokenResponseContent.match(regex.login_token_csrf);\n    if (!tokenCsrfMatch) throw new Error(\"Failed to get CSRF token\");\n    const tokenCsrf = tokenCsrfMatch[1];\n\n    const root = parse(tokenResponseContent);\n    const formUrl = root.querySelector(\"form\")?.getAttribute(\"action\");\n    if (!formUrl) throw new Error(\"Failed to get form URL\");\n\n    const form = new URLSearchParams();\n    form.append(\"login\", username);\n    form.append(\"password\", password);\n    form.append(\"screenWidth\", \"1680\");\n    form.append(\"screenHeight\", \"1050\");\n    form.append(\"token_csrf\", tokenCsrf);\n    form.append(\"btnSeConnecter\", \"Se%20connecter\");\n\n    const loginRequest = new Request(baseURL.endsWith(\"index.php\") ? baseURL.slice(0, -10) : baseURL, `/${formUrl}`);\n    loginRequest.setFormData(form.toString());\n    loginRequest[\"headers\"].set(\"Cookie\", `${tokenCookie}; ${serverIdCookie}`);\n\n    const loginResponse = await loginRequest.send();\n    const loginResponseCookies = parseCookies(loginResponse.headers);\n\n    if (![200, 303].includes(loginResponse.status)) {\n        throw new Error(\"Failed to login: Server respond with \" + loginResponse.status);\n    }\n\n    if (loginResponse.status === 303 && loginResponse.headers.get(\"location\")?.includes(\"8\")) {\n        throw new Error(\"Failed to login: Connection refused.\");\n    }\n    if (loginResponse.status === 303 && !loginResponse.headers.get(\"location\")) {\n        throw new Error(\"Failed to login: No location header found.\");\n    }\n    if (loginResponse.status === 303 && !loginResponseCookies.find((c) => c.startsWith(`${cookieName}=`))) {\n        throw new Error(\"Failed to login: No session cookie found.\");\n    }\n    if (loginResponse.status === 303 && loginResponse.headers.get(\"location\")?.includes(\"2\")) {\n        throw new Error(\"Failed to login: Invalid credentials.\");\n    }\n    if (loginResponse.status === 303 && loginResponse.headers.get(\"location\")?.includes(\"4\")) {\n        throw new Error(\"Failed to login: Account locked or not activated.\");\n    }\n\n    const session: Session = {\n        id: loginResponseCookies\n            .find((c) => c.startsWith(`${cookieName}=`))!\n            .split(\"=\")[1]\n            .split(\";\")[0],\n        baseURL: `${baseURL}${instanceURL ? instanceURL.split(\".\")[1] + \".php\" : \"\"}`,\n        serverId: serverIdCookie.split(\"=\")[1],\n        cookieName: tokenCookie.split(\"=\")[0],\n    };\n\n    console.log(\"sess\", session);\n\n    return session;\n};\n\n//todo\nexport const loginCookie = async (baseURL: string, cookie: string, serverId: string): Promise<Session> => {\n    const checkRequest = new Request(baseURL, \"/\");\n    const checkResponse = await checkRequest.send();\n    const checkResponseContent = await checkResponse.text();\n\n    if (checkResponse.status !== 302) {\n        if (!regex.check_instance_netypareo.test(checkResponseContent)) {\n            throw new Error(\"Failed to verify instance. Not a valid NetYPareo instance\");\n        }\n        if (!regex.check_instance_ymag.test(checkResponseContent)) {\n            throw new Error(\"Failed to verify instance. Not a valid NetYPareo instance\");\n        }\n    }\n\n    const instanceURL = checkResponse.headers.get(\"location\") || \"\";\n\n    const session: Session = {\n        id: cookie,\n        baseURL: `${baseURL}${instanceURL ? instanceURL.split(\".\")[1] + \".php\" : \"\"}`,\n        serverId,\n        cookieName: \"NYSESSID\",\n    };\n\n    const checkCookieRequest = new Request(session.baseURL, \"/apprenant/accueil\");\n    checkCookieRequest.setSession(session);\n    const checkCookieResponse = await checkCookieRequest.send();\n\n    if (checkCookieResponse.status !== 200) {\n        throw new Error(\"Failed to login: Server respond with \" + checkCookieResponse.status);\n    }\n\n    return session;\n};\n","import {PlanningIcon} from \"~/models/planning-icon\";\n\nexport const decodePlanningIcon = (item: any): PlanningIcon => {\n    return {\n        web_class: item.classe,\n        text: item.libelle,\n    };\n}","import { PlanningItem } from \"~/models/planning-item\";\nimport { decodePlanningIcon } from \"~/decoders/planning-icons\";\n\nexport const decodeDayItem = (item: any): PlanningItem => {\n    // [COLOR]\n    let color = item.couleur;\n    if (color.startsWith(\"rgba\")) {\n        const rgba = item.color.slice(5, -1).split(\", \");\n        const r = parseInt(rgba[0]);\n        const g = parseInt(rgba[1]);\n        const b = parseInt(rgba[2]);\n        const a = parseInt(rgba[3]);\n        color = `#${r.toString(16)}${g.toString(16)}${b.toString(16)}${a.toString(16)}`;\n    }\n\n    // [START]\n    const minutes_start = item.minuteDebut;\n    const start_hours = Math.floor(minutes_start / 60);\n    const start_minutes = minutes_start % 60;\n    const start = new Date(0, 0, 0, start_hours, start_minutes);\n\n    // [END]\n    const minutes_end = item.minuteDebut + item.duree;\n    const end_hours = Math.floor(minutes_end / 60);\n    const end_minutes = minutes_end % 60;\n    const end = new Date(0, 0, 0, end_hours, end_minutes);\n\n    // [ICON]\n    const icon = item.icones.map(decodePlanningIcon);\n\n    return {\n        id: item.code,\n        type: item.type,\n        name: item.libelle,\n        duration: item.duree,\n        details: item.detail,\n        subject_id: item.metadatas.codeMatiere,\n        subject_coefficient: item.metadatas.coeff,\n        subject_groups: item.metadatas.codesGroupes,\n        color,\n        start,\n        end,\n        icon,\n    };\n};\n","import {PlanningDay} from \"~/models/planning-day\";\nimport {decodeDayItem} from \"~/decoders/planning-item\";\n\nexport const decodePlanningDay = (object: any):PlanningDay => {\n    return {\n        day_start_in_minutes: object.configuration.minuteDebut,\n        day_end_in_minutes: object.configuration.minuteFin,\n        day_number: object.configuration.jours[0],\n\n        week_id: object.semaines[0].code,\n        week_start: new Date(object.semaines[0].dateDebut),\n        week_text: object.semaines[0].libelle,\n        slots: object.semaines[0].ressources[0].seances.map(decodeDayItem),\n    };\n};","import {PlanningWeek} from \"~/models/planning-week\";\nimport {decodeDayItem} from \"~/decoders/planning-item\";\n\nexport const decodePlanningWeek = (object: any):PlanningWeek => {\n    return {\n        week_id: object.semaines[0].code,\n        week_start: new Date(object.semaines[0].dateDebut),\n        week_text: object.semaines[0].libelle,\n        slots: object.semaines[0].ressources[0].seances.map(decodeDayItem),\n    };\n};","import type { Session } from \"~/models\";\nimport { Request } from \"~/core/request\";\nimport { decodePlanningDay } from \"~/decoders/planning-day\";\nimport { regex } from \"~/const/regex\";\nimport { PlanningDay } from \"~/models/planning-day\";\nimport { decodePlanningWeek } from \"~/decoders/planning-week\";\n\nexport const planningFromDay = async (session: Session, date: Date): Promise<PlanningDay> => {\n    if (!session.id) throw new Error(\"Session cookie is not defined ! You must login first.\");\n    if (!session.baseURL) throw new Error(\"Base URL is not defined ! You must login first.\");\n\n    const isoDate = date.toISOString().split(\"T\")[0];\n    const dateUrl = isoDate.split(\"-\").reverse().join(\"/\");\n\n    const planningRequest = new Request(session.baseURL, `/planning/jour/ajax/${dateUrl}`);\n    planningRequest.setSession(session);\n    const planningResponse = await planningRequest.send();\n\n    if (planningResponse.status !== 200) {\n        throw new Error(\"Failed to fetch planning: The session has expired\");\n    }\n\n    try {\n        const text = await planningResponse.text();\n        const planning = JSON.parse(text);\n        return decodePlanningDay(planning);\n    } catch (error) {\n        throw new Error(`Failed to parse the planning: ${error}`);\n    }\n};\n\nexport const planningFromWeek = async (session: Session, years: string, weekNumber: string) => {\n    if (!session.id) throw new Error(\"Session cookie is not defined ! You must login first.\");\n    if (!session.baseURL) throw new Error(\"Base URL is not defined ! You must login first.\");\n\n    const planningRequest = new Request(session.baseURL, `/apprenant/planning/courant/?semaineDebut=${years}${weekNumber}`);\n    planningRequest.setSession(session);\n    const planningResponse = await planningRequest.send();\n\n    if (planningResponse.status !== 200) {\n        throw new Error(\"Failed to fetch timetable: The session has expired\");\n    }\n\n    try {\n        const text = await planningResponse.text();\n        const studentTimetableMatch = text.match(regex.student_timetable);\n        if (!studentTimetableMatch) throw new Error(\"Failed to get student timetable\");\n\n        const planning = JSON.parse(studentTimetableMatch[1]);\n        console.log(\"planning\", planning);\n        return decodePlanningWeek(planning);\n    } catch (error) {\n        throw new Error(`Failed to parse the planning: ${error}`);\n    }\n};\n","export const decodeCloudflareEmail = (encodedString: string) => {\n    const hex = encodedString.startsWith(\"#\") ? encodedString.slice(1) : encodedString;\n    let email = \"\";\n    const key = parseInt(hex.slice(0, 2), 16);\n    for (let i = 2; i < hex.length; i += 2) {\n        const charCode = parseInt(hex.slice(i, i + 2), 16) ^ key;\n        email += String.fromCharCode(charCode);\n    }\n    return email;\n};\n","import { format, parse } from \"date-fns\";\nimport { fr } from \"date-fns/locale\";\nimport { Profile } from \"~/models/profile\";\nimport { decodeCloudflareEmail } from \"~/utils/cloudflare\";\n\nexport const decodeProfile = (root: HTMLElement): Profile => {\n    const fullNameRaw = root.querySelector(\".block-toolbar .ellipsis\")?.textContent?.trim() ?? \"\";\n    const cleanFullName = fullNameRaw.replace(/^(M\\.|Mme)\\s*/i, \"\").trim();\n    const [lastName, ...firstNameParts] = cleanFullName.split(/\\s+/);\n    const firstName = firstNameParts.join(\" \");\n    const fullName = `${firstName} ${lastName}`.trim();\n    const gender = fullNameRaw.includes(\"Mme\") ? \"F\" : fullNameRaw.includes(\"M.\") ? \"M\" : \"O\";\n\n    const addressCard = root.querySelector(\"div[id^='card-adresse']\");\n\n    const addressLines =\n        Array.from(addressCard?.querySelectorAll(\".block-adresse-ligne\") ?? [])\n            .filter((el) => el.textContent.includes(\"Adresse\"))\n            .map((el) => el.textContent.trim())\n            .join(\"\\n\")\n            .split(\"\\n\")\n            .map((l) => l.trim())\n            .filter((line) => line && line !== \"-\" && !/\\d{5}\\s+\\S+/.test(line) && !/^[A-Z\\s\\-]{2,}$/.test(line)) ?? [];\n\n    const address = addressLines.join(\", \");\n\n    const rawLines =\n        addressCard\n            ?.querySelector(\".block-body\")\n            ?.textContent.split(\"\\n\")\n            .map((l) => l.trim())\n            .filter(Boolean) ?? [];\n\n    const postalLine = rawLines.find((line) => /\\d{5}\\s+\\S+/.test(line)) || \"\";\n    const postalCode = postalLine.match(/\\d{5}/)?.[0] ?? \"\";\n    const city = postalLine.replace(postalCode, \"\").trim();\n    const country = rawLines.find((line) => /^[A-Z\\s\\-]{2,}$/.test(line)) || \"France\";\n\n    const phone = addressCard?.querySelector(\"a[href^='tel:']\")?.textContent.replace(/[\\s.]/g, \"\").trim() ?? \"\";\n\n    const emailLink = addressCard?.querySelector(\"a[href^='/cdn-cgi/l/email-protection'], a[href^='mailto:']\");\n    const emailHref = emailLink?.getAttribute(\"href\");\n    const email = emailHref?.startsWith(\"/cdn-cgi/\") ? decodeCloudflareEmail(emailHref.split(\"#\")[1] || \"\") : emailLink?.textContent.trim() ?? \"\";\n\n    const birthText = root.querySelector(\"p\")?.textContent.includes(\"Né\") ? root.querySelector(\"p\")?.textContent ?? \"\" : \"\";\n    const dateMatch = birthText.match(/le (\\d{1,2} \\w+ \\d{4})/)?.[1] || \"\";\n    const dateOfBirth = parse(dateMatch, \"d MMMM yyyy\", new Date(), { locale: fr });\n\n    const className = root.querySelector(\".modal-link-formation\")?.textContent.trim() ?? \"\";\n    const groupName = root.querySelector(\".lnk-modal-groupe\")?.textContent.trim() ?? \"\";\n\n    const schoolCycleText = root.querySelector(\".user-info-label span\")?.textContent.trim() ?? \"\";\n    const schoolCycleMatch = schoolCycleText.match(/(\\d{4}-\\d{4})/);\n    const schoolCycle = schoolCycleMatch ? schoolCycleMatch[1] : null;\n\n    return {\n        firstName,\n        lastName,\n        fullName,\n        email,\n        phone,\n        address,\n        postalCode,\n        city,\n        country,\n        gender: gender as \"M\" | \"F\" | \"O\",\n        dateOfBirth: format(dateOfBirth, \"yyyy-MM-dd\"),\n        className,\n        groupName,\n        currentSchoolCycle: schoolCycle,\n    };\n};\n","import { Session } from \"~/models\";\nimport { Profile } from \"~/models/profile\";\nimport { decodeProfile } from \"~/decoders/profile\";\nimport { Request } from \"~/core/request\";\nimport { parse } from \"node-html-parser\";\n\nexport const getProfile = async (session: Session): Promise<Profile> => {\n    if (!session.id) throw new Error(\"Session cookie is not defined ! You must login first.\");\n    if (!session.baseURL) throw new Error(\"Base URL is not defined ! You must login first.\");\n\n    const req = new Request(session.baseURL, \"/apprenant/details\");\n    req.setSession(session);\n\n    console.log(\"reqqq\", req);\n\n    const res = await req.send();\n\n    console.log(\"status\", res.status);\n\n    if (res.status !== 200) {\n        throw new Error(\"Failed to fetch profile: The session has expired\");\n    }\n\n    const arrayBuffer = await res.arrayBuffer();\n    const buffer = Buffer.from(arrayBuffer);\n    const text = buffer.toString(\"latin1\");\n\n    try {\n        // On parse le HTML en DOM-like object\n        const root = parse(text);\n\n        // decodeProfile prend le HTML root ou directement le string (selon ta version)\n        // Passe le texte brut si decodeProfile attend un HTMLElement du navigateur\n        //@ts-ignore\n        return decodeProfile(root);\n    } catch (error) {\n        throw new Error(`Failed to parse the profile: ${error}`);\n    }\n};\n"]}